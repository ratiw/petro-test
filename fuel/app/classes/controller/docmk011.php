<?php 

/**
 * Generated by Crude CRUD generator for Fuel on
 * December 31, 2011, 11:34 pm
 *
 * @file      classes\controller\docmk011.php
 * @database  fuel_dev
 * @type      mysql
 * @table     docmk011
 * @stencil   activeapp\
 */

class Controller_DocMK011 extends Controller_App
{
    public static function _init()
    {
        parent::_init();
        // Config::set('language', 'th');
        // Lang::load('Docmk011');
        // static::$ref_type = 400;    // ref_type for Docmk011    
	}

    /**
     * Define columns
     */
    protected static function _columns($page = 'index')
    {
		$columns_for = array(
			'view' => array(
				// array('name' => 'id'),
				'mk_id' => array('label' => 'MK No.', 
					'grid' => array(
						'process' => function($data) {
							return Petro_Lookup::table('docmk', 'id', 'mk_no', $data->mk_id);
						}
					),
				),
				'suggest_roll',
				'length',
				'remark',
				'user_id',
				// array('name' => 'created_at'),
				// array('name' => 'updated_at'),
			),
       );
        
       if ($page == 'index')
       {
			$columns_for['view']['_action_'] = Petro_Grid::default_actions();
			return $columns_for['view'];
       }
        
        return $columns_for[$page];
    }


    /**
     * Index
     */
    public function action_index($page = 1, $order_by = null, $scope = null, $filter = null)
    {
       $grid = new Petro_Grid('Model_DocMK011', static::_columns('index'));
        
       $data['index_content'] = $grid->render(); //$page, $order_by, $scope, $filter);
        
       $this->sidebars->add('Sample Sidebar',
            "This is a sample. Delete this section from code, if you don't want them"
       );
        
       $this->action_items = array(
           array('title' => 'New Cutting Order', 'link' => 'docmk011/create'),
       );

		// set this to override default page_title
		// $this->template->page_title = "docmk011";
		$this->template->content = View::forge('docmk011/index', $data, false);
    }

    /**
     * View
     */
    public function action_view($id = null)
    {
        $mk011 = Model_DocMK011::find($id);

        $data['docmk011'] = Petro::render_panel(
            'Docmk011 Information',
            Petro::render_attr_table($mk011, static::_columns('view'))
        );
        
        $this->sidebars->add(
            'Render from another View!', 
            View::forge('sidebar_link', array('url' => 'going/anywhere'))
        );
        
        $this->action_items = array(
            array('title' => 'Edit Docmk011', 'link' => 'docmk011/edit/'.$id),
            array('title' => 'Delete Docmk011', 'link' => 'docmk011/delete/'.$id),
        );

        $this->template->page_title = "docmk011";
        $this->template->content = View::forge('docmk011/view', $data, false);
    }
    
	protected function setup_validation($mode = null)
	{
		$val = Validation::forge('mk011');
		$val->add_field('suggest_roll', 'Suggest roll', 'required');
		$val->add_field('length', 'Roll length', 'required');
		
		return $val;
	}

    protected function get_post_data($mk011)
    {
        $is_new = false;

        if ( !isset($mk011) )
        {
            $mk011 = array();
            $is_new = true;
        }

        $user = Auth::instance()->get_user_id();
        $screen_name = Auth::instance()->get_screen_name();
        
        $mk011['mk_id'] = Input::post('mk_id');
        $mk011['suggest_roll'] = Input::post('suggest_roll');
        $mk011['length'] = Input::post('length');
        $mk011['remark'] = Input::post('remark');
        $mk011['user_id'] = $user[1];

        return $is_new ? Model_DocMK011::forge($mk011) : $mk011;
    }

    /**
     * Create
     */
    public function action_create($mk_id = null)
    {
		$docmk = Model_DocMK::find($mk_id);
		if ( ! $docmk )
		{
			Session::set_flash('error', 'Invalid ref.link to docmk');
			Response::redirect('docmk011');
		}
		
		if (Input::method() == 'POST')
		{
			$val = $this->setup_validation();
			if ($val->run())
			{
				$mk011 = $this->get_post_data();

				if ($mk011 and $mk011->save())
				{
					Session::set_flash('notice', 'Added docmk011 #' . $mk011->id . '.');
					Response::redirect('docmk011');
				}
				else
				{
					Session::set_flash('notice', 'Could not save docmk011.');
				}
			}
			else
			{
				Session::set_flash('error', 'Please correct the error(s).');
				$this->template->set_global('errors', $val->errors());
			}
		}

		$this->template->set_global('docmk', $docmk);

		$this->sidebars->add(
			'Client Sales History', 
			'Total this month'.
			'<br>Total this year '
		);
		
        // $this->template->page_title = "New Cutting Order";
        $this->template->content = View::forge('docmk011/create');
    }

    /**
     * Edit
     */
	public function action_edit($id = null)
	{
		$mk011 = Model_DocMK011::find($id);
		$docmk = Model_DocMK::find($mk011->mk_id);

		if (Input::method() == 'POST')
       {
			$val = $this->setup_validation();
			if ( $val->run() )
			{
				$mk011 = $this->get_post_data($mk011);
				
				if ($mk011->save())
				{
					Session::set_flash('notice', 'Updated docmk011 #' . $id);
					Response::redirect('docmk011');
				}
				else
				{
					Session::set_flash('notice', 'Could not update docmk011 #' . $id);
				}
			}
			else
			{
				Session::set_flash('error', 'Validation failed.');
				$this->template->set_global('errors', $val->errors());
			}
       }

		$this->template->set_global('docmk011', $mk011);
		$this->template->set_global('docmk', $docmk);

		$this->template->page_title = "docmk011";
		$this->template->content = View::forge('docmk011/edit');
	}

    /**
     * Delete
     */
    public function action_delete($id = null)
    {
        if ($mk011 = Model_DocMK011::find($id))
        {
            $mk011->delete();

            Session::set_flash('notice', 'Deleted docmk011 #' . $id);
        }
        else
        {
            Session::set_flash('notice', 'Could not delete docmk011 #' . $id);
        }

        Response::redirect('docmk011');
    }

}